{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pa",
				"padding-top\tproperty"
			],
			[
				"padding",
				"padding-left\tproperty"
			],
			[
				"stat",
				"statIconB"
			],
			[
				"fon",
				"font-size\tproperty"
			],
			[
				"text",
				"text-shadow\tproperty"
			],
			[
				"bac",
				"background-size\tproperty"
			],
			[
				"padd",
				"padding-left\tproperty"
			],
			[
				"wid",
				"width\tproperty"
			],
			[
				"max",
				"max-width\tproperty"
			],
			[
				"contain",
				"container-fluid"
			],
			[
				"margin",
				"margin\tproperty"
			],
			[
				"he",
				"min-height\tproperty"
			],
			[
				"back",
				"background-size\tproperty"
			],
			[
				"col",
				"col-sm-12"
			],
			[
				"ju",
				"justify-content-center"
			],
			[
				"contai",
				"container-fluid"
			],
			[
				"tables",
				"tableStatsColumnC"
			],
			[
				"tableStat",
				"tableStatsColumnB"
			],
			[
				"col-md",
				"col-md-8"
			],
			[
				"tex",
				"text-align\tproperty"
			],
			[
				"min",
				"min-width\tproperty"
			],
			[
				"lvl",
				"lvlConstitution"
			],
			[
				"lvlC",
				"lvlConstitution"
			],
			[
				"lvlMa",
				"lvlMagic"
			],
			[
				"pad",
				"padding-bottom\tproperty"
			],
			[
				"ali",
				"align-content\tproperty"
			],
			[
				"margi",
				"margin-bottom\tproperty"
			],
			[
				"mar",
				"margin-bottom\tproperty"
			],
			[
				"val",
				"validateStarting"
			],
			[
				"table",
				"table-column-group\tdisplay"
			],
			[
				"bor",
				"border-top-style\tproperty"
			],
			[
				"wi",
				"column-width\tproperty"
			],
			[
				"rbg",
				"rgba()\tcolor"
			],
			[
				"paddi",
				"padding-left\tproperty"
			],
			[
				"border-co",
				"border-color\tproperty"
			],
			[
				"in",
				"inline-block\tdisplay"
			],
			[
				"baseCo",
				"baseConstitution"
			],
			[
				"statLife",
				"statLifeConstitution"
			],
			[
				"base",
				"baseSkill"
			],
			[
				"star",
				"startingDualSwords"
			],
			[
				"updt",
				"updateBuild"
			],
			[
				"updat",
				"updateBuild"
			],
			[
				"up",
				"updateMagic"
			],
			[
				"upd",
				"updateMagic"
			],
			[
				"upda",
				"updateStamina"
			],
			[
				"check",
				"checked"
			],
			[
				"te",
				"textContent"
			],
			[
				"Ge",
				"getElementsByName"
			],
			[
				"statOnmy",
				"statOnmyoMagicCapacityMagic"
			],
			[
				"baseOnmy",
				"baseOnmyoMagicCapacity"
			],
			[
				"statOn",
				"statOnmyoMagicPowerCourage"
			],
			[
				"statLif",
				"statLifeConstitution"
			],
			[
				"baseC",
				"baseCourage"
			],
			[
				"statO",
				"statOnmyoMagicPowerMagic"
			],
			[
				"chang",
				"changeTotalLife"
			],
			[
				"cha",
				"changeTotalLevel"
			],
			[
				"chan",
				"changeTotalDefenseParalysis"
			],
			[
				"fun",
				"function"
			],
			[
				"statOnm",
				"statOnmyoMagicPowerMagic"
			],
			[
				"statEqu",
				"statEquipmentWeightMaxStamina"
			],
			[
				"statKi",
				"statKiRecoveryCourage"
			],
			[
				"font-st",
				"font-style\tproperty"
			],
			[
				"hea",
				"headerImage"
			],
			[
				"font-",
				"font-style\tproperty"
			],
			[
				"backgr",
				"background-color\tproperty"
			],
			[
				"statKiRe",
				"statKiRecoveryCourage"
			],
			[
				"baseKi",
				"baseKiRecovery"
			],
			[
				"border",
				"border-width\tproperty"
			],
			[
				"font",
				"font-family\tproperty"
			],
			[
				"al",
				"vertical-align\tproperty"
			],
			[
				"border-",
				"border-style\tproperty"
			],
			[
				"sta",
				"statDefensePoisonConstitution"
			],
			[
				"st",
				"statKiHeart"
			],
			[
				"total",
				"totalHeart"
			],
			[
				"s",
				"script"
			],
			[
				"get",
				"getElementById"
			],
			[
				"bord",
				"border-width\tproperty"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "//CameraGeek\n//A Discord bot for Camera Department\n//Written by Michael L. Foo\n//GitHub (https://github.com/michaellfoo/CameraGeek)\n// var forever = require('forever-monitor');\n\n// var child = new (forever.Monitor)('index.js', {\n//   max: 3,\n//   silent: true,\n//   args: []\n// });\n\n// child.on('exit', function () {\n//   console.log('index.js has exited after 3 restarts');\n// });\n\n// child.start();\n\nconst Discord = require(\"discord.js\");\nconst config = require(\"./testConfig.json\");\n\nconst client = new Discord.Client();\n\nconst prefix = \">\";\n\nclient.on(`ready`, () => {\n  console.log(`Logged in as ${client.user.tag}!`)\n\n\n  //Message functions\n  client.on(\"message\", function(message) {\n\n    //Ignore other bots\n      if (!message.content.startsWith(prefix) || message.author.bot) return;\n\n    //Trim prefix from command and find args\n      const args = message.content.slice(prefix.length).trim().split(/ +/);\n      const command = args.shift().toLowerCase();\n\n    //Help function\n      if (command === \"help\" && args[0] == null) {\n        console.log(`Serching for help with the following arguments: ${args}`);\n        const embed = new Discord.MessageEmbed()\n          .setTitle(`CameraGeek Commands Help`)\n          .setColor('#ffa13d')\n          .addFields(\n            {\n              name:  `Here is a list of my supported commands:`,\n              value: `-----------------------------------\\n\n                      diopter <unit> <distance> - Finds close focus with different diopter strengths.\\n\n                      findfeet <distance in meters> - Converts meters to feet.\\n\n                      findmeters <distance in feet> - Converts feet to meters.\\n\n                      miccheck - Checks to see if CameraGeek is on walkie!\\n\n                      ping - Shows message latency.\\n\n                      rollout <format> <fps> <mag size> - Calculates the shoot time of a length of film at a given frame rate.\\n\n                      version - Shows current CameraGeek version number. (For development purposes)\\n`\n            }\n          )\n        message.channel.send(embed);\n        return;\n      }\n      if (command === \"help\" && args[0] === \"diopter\") {\n        console.log(`Serching for help with the following arguments: ${args}`);\n        const embed = new Discord.MessageEmbed()\n          .setTitle(`Diopter Help`)\n          .setColor('#ffa13d')\n          .addFields(\n            {\n              name:  `\\\\diopter <unit> <close focus>`,\n              value: `Finds the close focus of a lens with different diopter strengths.\\n\n                      Uses the formula: f / (( d * f ) + 1 )\\n\n                      f = original close focus\\n\n                      d = diopter strength`\n            }\n          )\n        message.channel.send(embed);\n        return;          \n      }\n      else if (command === \"help\" && args[0] === \"findfeet\") {\n        console.log(`Serching for help with the following arguments: ${args}`);\n        const embed = new Discord.MessageEmbed()\n        .setTitle(`Find Feet Help`)\n        .setColor('#ffa13d')\n        .addFields(\n          {\n            name:  `\\\\findfeet <distance in meters>`,\n            value: `Converts meters into feet.\\n\n                    Approximates to ~3.3 feet per meter.`\n          }\n        )\n        message.channel.send(embed);\n        return;\n      }\n      else if (command === \"help\" && args[0] === \"findmeters\") {\n        console.log(`Serching for help with the following arguments: ${args}`);\n        const embed = new Discord.MessageEmbed()\n        .setTitle(`Find Meters Help`)\n        .setColor('#ffa13d')\n        .addFields(\n          {\n            name:  `\\\\findmeters <distance in feet>`,\n            value: `Converts feet into meters.\\n\n                    Approximates to ~3.3 feet per meter.`\n          }\n        )\n        message.channel.send(embed);\n        return;\n      }\n      else if (command === \"help\" && args[0] === \"rollout\") {\n        console.log(`Serching for help with the following arguments: ${args}`);\n        const embed = new Discord.MessageEmbed()\n        .setTitle(`Rollout Help`)\n        .setColor('#ffa13d')\n        .addFields(\n          {\n            name:  `\\\\rollout <format> <frame rate> <mag length>`,\n            value: `Calculates the shoot time of a length of film at a given frame rate.\\n\n                    Available formats:\\n\n                    <8> - Super8mm\\n\n                    <16> - 16mm\\n\n                    <35> - 35mm 4-perf\\n\n                    <353perf> - 35mm 3-perf\\n\n                    <352perf> - 35mm 2-perf\\n\n                    <65> - 65mm`\n          }\n        )\n        message.channel.send(embed);\n        return;\n      }\n\n    //Help template\n      // else if (command === \"help\" && args[0] === \"\") {\n      //   console.log(`Serching for help with the following arguments: ${args}`);\n      //   const embed = new Discord.MessageEmbed()\n      //   .setTitle(``)\n      //   .setColor('#ffa13d')\n      //   .addFields(\n      //     {\n      //       name:  `\\\\command <arg1> <arg2>`,\n      //       value: `\\n\n      //               \\n\n      //               \\n\n      //               `\n      //     }\n      //   )\n      //   message.channel.send(embed);\n      //   return;\n      // }\n\n\n\n    //Devhelp function\n      if (command === \"dev\") {\n        if (message.member.roles.cache.find(r => r.name === \"Developer\")) {\n          console.log(`${Date.now()}: User is a dev, replying...`)\n          const embed = new Discord.MessageEmbed()\n            .setTitle(`CameraGeek Developer Command Help`)\n            .setColor('#ffa13d')\n            .addFields(\n                {name: `Here is a list of supported developer commands:`,\n                value: `-----------------------------------\\n\n                        miccheck - Checks is CameraGeek is on walkie!\\n\n                        version - Shows current CameraGeek version number. (For development purposes)\\n`}\n            )\n          message.channel.send(embed);\n          return;\n        }\n        else {\n          message.channel.send(`Sorry ${message.author}, it doesn't look like you're a developer. Contact one of them if you'd like to contribute to the project!`);\n          return;\n        }\n      }\n\n    //CameraGeek developer functions\n\n    //Tests for arguments\n      else if (command === \"args-info\") {\n        if (!args.length) {\n          return message.channel.send(`You didn't provide any arguments, ${message.author}!`);\n        }\n        message.channel.send(`Command name: ${command}\\nArguments: ${args}`);\n        return;\n      }\n\n    //Start CameraGeek main functions\n\n    //Calculates close focus for diopters, works in inches, feet and meters\n      else if (command === \"diopter\") {\n        if (!args.length) {\n          return message.channel.send(`You didn't provide a distance unit and close focus, ${message.author}!`);\n        }\n\n        let [unit, closeFocus] = args;\n\n\n        if (unit === \"ft\") {\n          let closeFocusM = closeFocus / 3.3;\n          let dioHalf = (closeFocusM/((.5 * closeFocusM) + 1));\n          let dioFull = (closeFocusM/((1 * closeFocusM) + 1));\n          let dioTwo = (closeFocusM/((2 * closeFocusM) + 1));\n          let dioThree = (closeFocusM/((3 * closeFocusM) + 1));\n          let dioHalfFt = Number((dioHalf * 3.3).toFixed(1));\n          let dioFullFt = Number((dioFull * 3.3).toFixed(1));\n          let dioTwoFt = Number((dioTwo * 3.3).toFixed(1));\n          let dioThreeFt = Number((dioThree * 3.3).toFixed(1));\n          const embed = new Discord.MessageEmbed()\n            .setTitle(`Close Focus with Diopter Strengths`)\n            .setColor('#ffa13d')\n            .addFields(\n                {name: `Original Close Focus is ${closeFocus}ft.`,\n                value: `---------------------------\\n\n                        +1/2 Diopter: ${dioHalfFt}ft.\\n\n                        +1 Diopter: ${dioFullFt}ft.\\n\n                        +2 Diopter: ${dioTwoFt}ft.\\n\n                        +3 Diopter: ${dioThreeFt}ft.`}\n            )\n          message.channel.send(embed);\n          return;\n        }\n\n        if (unit === \"in\") {\n          let closeFocusM = (closeFocus / 12) / 3.3;\n          let dioHalf = (closeFocusM/((.5 * closeFocusM) + 1));\n          let dioFull = (closeFocusM/((1 * closeFocusM) + 1));\n          let dioTwo = (closeFocusM/((2 * closeFocusM) + 1));\n          let dioThree = (closeFocusM/((3 * closeFocusM) + 1));\n          let dioHalfIn = Number(((dioHalf * 3.3) * 12).toFixed(0));\n          let dioFullIn = Number(((dioFull * 3.3) * 12).toFixed(0));\n          let dioTwoIn = Number(((dioTwo * 3.3) * 12).toFixed(0));\n          let dioThreeIn = Number(((dioThree * 3.3) * 12).toFixed(0));\n          const embed = new Discord.MessageEmbed()\n            .setTitle(`Close Focus with Diopter Strengths`)\n            .setColor('#ffa13d')\n            .addFields(\n                {name: `Original Close Focus is ${closeFocus}in.`,\n                value: `---------------------------\\n\n                        +1/2 Diopter: ${dioHalfIn}in.\\n\n                        +1 Diopter: ${dioFullIn}in.\\n\n                        +2 Diopter: ${dioTwoIn}in.\\n\n                        +3 Diopter: ${dioThreeIn}in.`}\n            )\n          message.channel.send(embed);\n          return;\n        }\n\n        if (unit === \"m\") {\n          let dioHalf = Number((closeFocus/((.5 * closeFocus) + 1)).toFixed(2));\n          let dioFull = Number((closeFocus/((1 * closeFocus) + 1)).toFixed(2));\n          let dioTwo = Number((closeFocus/((2 * closeFocus) + 1)).toFixed(2));\n          let dioThree = Number((closeFocus/((3 * closeFocus) + 1)).toFixed(2));\n          const embed = new Discord.MessageEmbed()\n            .setTitle(`Close Focus with Diopter Strengths`)\n            .setColor('#ffa13d')\n            .addFields(\n                {name: `Original Close Focus is ${closeFocus}m.`,\n                value: `---------------------------\\n\n                        +1/2 Diopter: ${dioHalf}m.\\n\n                        +1 Diopter: ${dioFull}m.\\n\n                        +2 Diopter: ${dioTwo}m.\\n\n                        +3 Diopter: ${dioThree}m.`}\n            )\n            message.channel.send(embed);\n          return;\n        }\n\n      }\n\n    //Converts feet into meters\n      else if (command === \"findmeters\") {\n        if (!args.length) {\n          return message.channel.send(`You didn't provide a distance in feet (decimal), ${message.author}!`);\n        }\n\n        let [distanceFeet] = args;\n        let distanceMeters = Number((distanceFeet / 3.3).toFixed(1));\n        const embed = new Discord.MessageEmbed()\n          .setColor('#ffa13d')\n          .addFields(\n              {name: `Feet to Meters`,\n              value: `${distanceFeet}ft is equal to ${distanceMeters}m.`}\n          )\n          message.channel.send(embed);\n          return;\n      }\n\n    //Converts meters into feet\n      else if (command === \"findfeet\") {\n        if (!args.length) {\n          return message.channel.send(`You didn't provide a distance in meters (decimal), ${message.author}!`);\n        }\n\n        let [distanceMeters] = args;\n        let distanceFeet = Number((distanceMeters * 3.3).toFixed(1));\n        const embed = new Discord.MessageEmbed()\n          .setColor('#ffa13d')\n          .addFields(\n              {name: `Meters to Feet`,\n              value: `${distanceMeters}m is equal to ${distanceFeet}ft.`}\n          )\n          message.channel.send(embed);\n          return;\n      }\n\n    //Mic Check\n      else if (command === \"miccheck\") {\n        message.reply(`Good check!`);\n        return;\n      }\n\n    //Ping function\n      if (command === \"ping\") {\n        const timeTaken = Date.now() - message.createdTimestamp;\n        message.reply(`Pong! This message had a latency of ${timeTaken}ms.`);\n        return;\n      }\n\n    //Rollout function\n      if (command === \"rollout\") {\n\n      let [format, fps, magSize] = args;\n      console.log(`User entered \\\\rollout for ${format}mm film @${fps}fps, ${magSize}ft mag.`);\n\n      const firlRef = ['frames per foot', 'feet per minute @ 24fps']\n      const film8 = [80, 18]\n      const film16 = [40, 36]\n      const film35 = [16, 90]\n      const film353perf = [21.333, 67.501]\n      const film352perf = [32, 45]\n      const film65 = [12.8, 112.5]\n\n        if (!args.length) {\n          return message.channel.send(`You didn't provide a format (in mm), frame rate or a foot length, ${message.author}! Type \"!help rollout\" for command syntax.`);\n        }\n\n        if (format == '8') {\n          let secPerFoot = (film8[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number((rolloutTime / 60) - ((rolloutTime % 60) / 100)).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60).toFixed(2);\n          let shotFrames = Number(film8[0] * magSize).toFixed(0);\n          if (rolloutTime > 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of Super8mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magMinutes).toFixed(0)}min ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          if (rolloutTime < 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of Super8mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          return;\n        }\n        if (format == '16') {\n          let secPerFoot = (film16[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number((rolloutTime / 60) - ((rolloutTime % 60) / 100)).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60).toFixed(2);\n          let shotFrames = Number(film16[0] * magSize).toFixed(0);\n          if (rolloutTime > 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 16mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magMinutes).toFixed(0)}min ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          if (rolloutTime < 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 16mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          return;\n        }\n        if (format == '35') {\n          let secPerFoot = (film35[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number((rolloutTime / 60) - ((rolloutTime % 60) / 100)).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60).toFixed(2);\n          let shotFrames = Number(film35[0] * magSize).toFixed(0);\n          if (rolloutTime > 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 35mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magMinutes).toFixed(0)}min ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          if (rolloutTime < 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 35mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          return;\n        }\n        if (format == '353perf') {\n          let secPerFoot = (film353perf[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number((rolloutTime / 60) - ((rolloutTime % 60) / 100)).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60);\n          let shotFrames = Number(film353perf[0] * magSize).toFixed(0);\n          if (rolloutTime > 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 35mm 3-perf @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magMinutes).toFixed(0)}min ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          if (rolloutTime < 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 35mm 3-perf @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          return;\n        }\n        if (format == '352perf') {\n          let secPerFoot = (film352perf[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number((rolloutTime / 60) - ((rolloutTime % 60) / 100)).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60);\n          let shotFrames = Number(film352perf[0] * magSize).toFixed(0);\n          if (rolloutTime > 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 35mm 2-perf @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magMinutes).toFixed(0)}min ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          if (rolloutTime < 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 35mm 2-perf @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          return;\n        }\n        if (format == '65') {\n          let secPerFoot = (film65[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number((rolloutTime / 60) - ((rolloutTime % 60) / 100)).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60).toFixed(2);\n          let shotFrames = Number(film65[0] * magSize).toFixed(0);\n          if (rolloutTime > 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 65mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magMinutes).toFixed(0)}min ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          if (rolloutTime < 60) {\n            const embed = new Discord.MessageEmbed()\n              .setColor('#ffa13d')\n              .setTitle(`${magSize}ft mag of 65mm @${fps}fps`)\n              .addFields(\n                  {name: `Mag will roll out in ${Number(magSeconds).toFixed(1)}sec.`,\n                  value: `In that time you can shoot up to ${shotFrames} frames!`}\n              )\n            message.channel.send(embed);\n          }\n          return;\n        }\n\n      }\n\n    //Version function\n      if (command === \"version\") {\n        message.reply(`CameraGeek is currently on ${config.version}!`);\n        return;\n      }\n\n  })\n\n})\nclient.login(config.token);",
			"file": "testbot.js",
			"file_size": 21824,
			"file_write_time": 132548060195610284,
			"settings":
			{
				"buffer_size": 21320,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"terminusview",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"alignment",
				"Preferences: Alignment File Settings – Default"
			],
			[
				"side",
				"Side Bar: Enable Syncing"
			],
			[
				"ty",
				"Typewriter: Scrolling Mode (Toggle)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"npm init -y",
			"!diopter",
			"node index.js",
			"npm init",
			"npm install discord.js",
			"$ npm init",
			"npm init",
			"npm",
			"npm init",
			"npm"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/node_modules",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/node_modules/discord.js"
	],
	"file_history":
	[
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/testbot.js",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/index.js",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/Terminal/Default (Windows).sublime-keymap",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/config.json",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/testConfig.json",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/banList.log",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/warnList.log",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/README.md",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/reply-message.js",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/command.js",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/.gitignore",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/package.json",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/package-lock.json",
		"/C/Users/fooji/Desktop/CameraGeek/CameraGeek/LICENSE",
		"/C/Users/fooji/Desktop/CameraNerd/index.js",
		"/C/Users/fooji/Desktop/CameraNerd/config.json",
		"/C/Users/fooji/Desktop/DOS.ct",
		"/C/Users/fooji/Desktop/HideBackpacks.dll",
		"/E/SteamLibrary/steamapps/common/Outward/Mods/ModConfigs/GAuth_VanityMod.config",
		"/C/Users/fooji/Desktop/SoulsModding/DS3/DS3_The-Grand-Archives.CT",
		"/E/SteamLibrary/steamapps/common/Outward/Mods/GAuth_VanityMod.dll",
		"/E/SteamLibrary/steamapps/common/Sekiro/run.vbs",
		"/E/SteamLibrary/steamapps/common/Outward/Player0_Keymappings.xml",
		"/C/Users/fooji/Desktop/ModEngine-0.1.11/modengine.ini",
		"/E/SteamLibrary/steamapps/common/Sekiro/modengine.ini",
		"/C/Users/fooji/Desktop/WebDevBootcampStuff/index.html",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/AutoBackupTool/run.vbs",
		"/C/Users/fooji/Desktop/WebDevBootcampStuff/script.js",
		"/C/Users/fooji/Desktop/WebDevBootcampStuff/11_Pattern_Project/Starter/index.html",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/wex_dust_config.txt",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/honestMerchant.ini",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/AshesLauncher/Disabled/honestMerchant.ini",
		"/C/Users/fooji/Desktop/Pyre-Protecc.V4/Config.txt",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/AshesLauncher/Ashes/modengine.ini",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/AshesLauncher/Ashes/honestMerchant.ini",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/modengine.ini",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/AutoBackupTool/source.cpp",
		"/C/Users/fooji/Desktop/AutoBackupTool/run.vbs",
		"/C/Users/fooji/Desktop/AutoBackupTool/DSIIIRunwBackup.bat",
		"/C/Users/fooji/Desktop/AutoBackupTool/settings.ini",
		"/C/Users/fooji/AppData/Roaming/DarkSoulsIII/011000010308448e/DS30000.sl2",
		"/C/Program Files (x86)/Microsoft Visual Studio/2019/Community/run.vbs",
		"/C/Users/fooji/Desktop/auto.bat",
		"/C/Users/fooji/Desktop/run.vbs",
		"/E/SteamLibrary/steamapps/common/Sekiro/reshade-shaders/Shaders/OtisFX/CinematicDOF.fx",
		"/E/SteamLibrary/steamapps/common/Sekiro/ReShade.ini",
		"/C/Users/fooji/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/AbletonCopyAndRun.bat",
		"/C/Users/fooji/Desktop/README.txt",
		"/C/Users/fooji/Desktop/Sheath/gameparam-parambnd-dcx/param/GameParam/DecalParam.param",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/README.txt",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9000-partsbnd-dcx/parts/FullBody/BD_M_9000/material.txt",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/wp_a_0300-partsbnd-dcx/parts/Weapon/WP_A_0300/WP_A_0300-tpf/_yabber-tpf.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9000-partsbnd-dcx/_yabber-bnd4.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9030-partsbnd-dcx/_yabber-bnd4.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9030-partsbnd-dcx/parts/FullBody/BD_M_9030/BD_M_9030-tpf/_yabber-tpf.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9030-partsbnd-dcx/parts/FullBody/BD_M_9040/BD_M_9040-tpf/_yabber-tpf.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9000-partsbnd-dcx/parts/FullBody/BD_M_9040/BD_M_9000-tpf/_yabber-tpf.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/wp_a_0310-partsbnd-dcx/_yabber-bnd4.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9040-partsbnd-dcx/parts/FullBody/BD_M_9040/BD_M_9040-tpf/_yabber-tpf.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/bd_m_9040-partsbnd-dcx/_yabber-bnd4.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/wp_a_0300-partsbnd-dcx/parts/Weapon/WP_A_0300/WP_A_0300-tpf/Material.json",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/lg_m_9000-partsbnd-dcx/_yabber-bnd4.xml",
		"/C/Users/fooji/Desktop/SoulsModding/Sekiro/MugenOutfit/parts/wp_a_0300-partsbnd-dcx/parts/Weapon/WP_A_0310/WP_A_0310-tpf/_yabber-tpf.xml",
		"/C/Users/fooji/Desktop/param/gameparam/gameparam.parambnd.dcx",
		"/E/SteamLibrary/steamapps/common/DARK SOULS III/Game/DS3PWSettings.ini",
		"/C/Program Files (x86)/Steam/steamapps/common/MGS_TPP/mod/profiles/Subsistence_Pure.lua",
		"/C/Program Files (x86)/Steam/steamapps/common/MGS_TPP/mod/profiles/Subsistence_Game.lua",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/v0.1/NiohCharPlanner.html",
		"/C/Program Files (x86)/Steam/steamapps/common/MGS_TPP/mod/profiles/Subsistence_Bounder.lua",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/v0.1/bootstrapStyle.css",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/v0.1/style.css",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/v0.1/coreStatArrays.js",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/LICENSE.md",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharPlanner/v0.1/coreStatArrays.js",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/README.md",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharPlanner/v0.1/NiohCharPlanner.html",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/.gitignore",
		"/C/Users/fooji/Documents/GitHub/Nioh2CharPlanner/README.txt",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharPlanner/v0.2/NiohCharPlanner.html",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharPlanner/v0.2/coreStatArrays.js",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharPlanner/v0.2/style.css",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharPlanner/v0.2/LICENSE",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.2/style.css",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.2/coreStatArrays.js",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.2/NiohCharBuilder.sublime-project",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.2/NiohCharPlanner.html",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.2/NiohCharBuilder.html",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.2/scripts/style.css",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/Alignment/Default (Windows).sublime-keymap",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/Alignment/Base File.sublime-settings",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/Terminal/Base File.sublime-settings",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/User/Base File.sublime-settings",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/SyncedSideBar/SyncedSideBar.sublime-settings",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/User/SyncedSideBar.sublime-settings",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.1/scripts/CoreStatArrays.js",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.1/style.css",
		"/C/Users/fooji/Documents/SublimeTextDocs/NiohCharBuilder/v0.1/CoreStatArrays.js",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/User/Typewriter.sublime-settings",
		"/C/Users/fooji/AppData/Roaming/Sublime Text 3/Packages/Typewriter/Typewriter.sublime-settings",
		"/C/Users/fooji/Documents/SublimeTextDocs/portfolioStyle.css",
		"/C/Users/fooji/Documents/SublimeTextDocs/photoGrid.html",
		"/C/Users/fooji/Documents/SublimeTextDocs/firstPage.html",
		"/C/Users/fooji/Documents/SublimeTextDocs/selectorsExercise.html",
		"/C/Users/fooji/Documents/SublimeTextDocs/selectors.css",
		"/C/Users/fooji/Documents/SublimeTextDocs/style.css",
		"/C/Users/fooji/Documents/SublimeTextDocs/home.html"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 161.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"!",
			"        if (format == 8) {\n          let secPerFoot = (film8[0] / fps);\n          let rolloutTime = (secPerFoot * magSize); //rollout time in seconds\n          console.log(`Seconds per foot: ${secPerFoot}, rollout time: ${rolloutTime}sec.`);\n          let magMinutes = Number(rolloutTime / 60).toFixed(0);\n          let magSeconds = Number(rolloutTime % 60).toFixed(2);\n          console.log(`Mag will rollout in ${magMinutes}min ${magSeconds}sec.`);\n          return;\n        }",
			"#DAF7A6",
			"test",
			"nerd",
			"project_description",
			"repo_name",
			"github_username",
			"project_title"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "testbot.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21320,
						"regions":
						{
						},
						"selection":
						[
							[
								401,
								401
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 390.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 73.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 180.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.nodejs":
	{
		"height": 192.0
	},
	"output.unsaved_changes":
	{
		"height": 204.0
	},
	"pinned_build_system": "",
	"project": "CameraGeek.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 226.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
